<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tuotuoliny</title>
  
  <subtitle>xxxx</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-17T08:29:12.346Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>martin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于多态（2）</title>
    <link href="http://example.com/2023/10/17/polymorphism-1/"/>
    <id>http://example.com/2023/10/17/polymorphism-1/</id>
    <published>2023-10-17T07:59:07.000Z</published>
    <updated>2023-10-17T08:29:12.346Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前提</strong>：<strong>继承</strong>（实现）、<strong>覆盖</strong>（override）、<strong>向上转型</strong>。</p><p><strong>目的</strong>：通过允许向上转型，实现动态绑定，在”不变“中实现“变化”。</p><p><strong>原则</strong>：开闭原则。</p><p><strong>实现</strong>：使用基类的引用或者指针，引用或者指向子类对象。这些不同的子类实现了一些基类中相同的方法，但各有自己的不同操作，在进行这些相同操作时，系统会根据实际引用和指向的对象，确定需要调用哪一个子类对象的那一个共同方法。</p><p><strong>影响</strong>：实现了静态语言的动态绑定，解决参数传递只能传递指定类型的局限性，有利于实现开闭原则。</p><p><strong>注意</strong>：在向上转型后，该引用不能调用子类对象独有的方法。解决方法：强制类型转换，不安全。</p><p><strong>技术</strong>：虚函数指针，虚函数表，虚函数切片。</p><p><strong>示例</strong>：C++,Java,Python的多态实现，Java的interface与abstract类的区别。   </p><ul><li>C++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++(1)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义一个函数为虚函数，不代表函数为不被实现的函数。</span></span><br><span class="line"><span class="comment">    定义它为虚函数是为了允许用基类的指针来调用子类的这个函数。</span></span><br><span class="line"><span class="comment">    定义一个函数为纯虚函数，才代表函数没有被实现。</span></span><br><span class="line"><span class="comment">    定义纯虚函数是为了实现一个接口，起到一个规范的作用，规范继承这个类的程序员必须实现这个函数。</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//c++中需要虚函数，才能实现多态(虚函数表),普通方法的重写不能实现多态</span></span><br><span class="line"><span class="comment">//包含虚函数的类并实现（低度抽象），可以实例化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;People speak!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span>: <span class="keyword">public</span> People&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;Man speak!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Woman</span>: <span class="keyword">public</span> People&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Woman speak!&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Func</span><span class="params">(People* people)</span></span>&#123;</span><br><span class="line">    people-&gt;<span class="built_in">speak</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//有虚函数但实现，可以实例化</span></span><br><span class="line">    People pp;</span><br><span class="line">    pp.<span class="built_in">speak</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用基类指针指向子类，实现多态</span></span><br><span class="line">    Man* man=<span class="keyword">new</span> <span class="built_in">Man</span>();</span><br><span class="line">    People* p =man;</span><br><span class="line">    <span class="built_in">Func</span>(p);</span><br><span class="line"></span><br><span class="line">    Woman woman;</span><br><span class="line">    <span class="built_in">Func</span>(&amp;woman);</span><br><span class="line">    <span class="comment">//输出：</span></span><br><span class="line">    <span class="comment">//People speak!</span></span><br><span class="line">    <span class="comment">//Man speak!</span></span><br><span class="line">    <span class="comment">//Woman speak!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//C++2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//只要类中包含纯虚函数，则该类为抽象类，不能实例化</span></span><br><span class="line"><span class="comment">//c++中需要虚函数，才能实现多态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只有纯虚函数的类,（高度抽象）为抽象类，不能实例化，相当java的接口</span></span><br><span class="line"><span class="comment">//子类必须实现纯虚函数，否则子类也为抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">sleep</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//包含虚函数与纯虚函数的类，为抽象类(中度抽象)，不能实例化，相当于java中的抽象类</span></span><br><span class="line"><span class="comment">//子类必须实现纯虚函数，否则子类也为抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Human speak!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>** argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Human1 human;</span></span><br><span class="line">    <span class="comment">// Human2 human2;</span></span><br><span class="line">    <span class="comment">//以上声明均会报错：variable type &#x27;Human2&#x27; is an abstract class</span></span><br><span class="line">  <span class="comment">//测试代码省略，同于Java</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python</span></span><br><span class="line"><span class="comment">#python的多态不严谨，鸭子模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Creature</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        ...</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">staticmethod</span>():</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span>(<span class="title class_ inherited__">Creature</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Human eats something！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">Creature</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Animal eats something!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#test</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Func</span>(<span class="params">creature</span>):</span><br><span class="line">    creature.eat()</span><br><span class="line"></span><br><span class="line">Func(Human())</span><br><span class="line">Func(Animal())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;前提&lt;/strong&gt;：&lt;strong&gt;继承&lt;/strong&gt;（实现）、&lt;strong&gt;覆盖&lt;/strong&gt;（override）、&lt;strong&gt;向上转型&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;：通过允许向上转型，实现动态</summary>
      
    
    
    
    
    <category term="OOP" scheme="http://example.com/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>关于多态(1)</title>
    <link href="http://example.com/2023/10/17/polymorphism/"/>
    <id>http://example.com/2023/10/17/polymorphism/</id>
    <published>2023-10-17T07:02:15.000Z</published>
    <updated>2023-10-17T08:29:27.626Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前提</strong>：<strong>继承</strong>（实现）、<strong>覆盖</strong>（override）、<strong>向上转型</strong>。</p><p><strong>目的</strong>：通过允许向上转型，实现动态绑定，在”不变“中实现“变化”。</p><p><strong>原则</strong>：开闭原则。</p><p><strong>实现</strong>：使用基类的引用或者指针，引用或者指向子类对象。这些不同的子类实现了一些基类中相同的方法，但各有自己的不同操作，在进行这些相同操作时，系统会根据实际引用和指向的对象，确定需要调用哪一个子类对象的那一个共同方法。</p><p><strong>影响</strong>：实现了静态语言的动态绑定，解决参数传递只能传递指定类型的局限性，有利于实现开闭原则。</p><p><strong>注意</strong>：在向上转型后，该引用不能调用子类对象独有的方法。解决方法：强制类型转换，不安全。</p><p><strong>技术</strong>：虚函数指针，虚函数表，虚函数切片。</p><p><strong>示例</strong>：C++,Java,Python的多态实现，Java的interface与abstract类的区别。   </p><ul><li>Java<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//（1）抽象类举例</span></span><br><span class="line"><span class="comment">//抽象类:不能被实例化</span></span><br><span class="line"><span class="comment">/*与接口的区别:包含了该类别常用的方法属性，包含已经实现的方法，不过因为其是抽象的，所以规定不能实例化。</span></span><br><span class="line"><span class="comment"> *方法相当于接口中的接口方法.</span></span><br><span class="line"><span class="comment"> *c++: 跟c++同时含有虚函数跟纯虚函数类似</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Creature</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//吃东西</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Creature: eating...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">think</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">human</span> <span class="keyword">extends</span> <span class="title class_">Creature</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">think</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Human is thinking !&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreature</span><span class="params">(Creature c)</span> &#123;</span><br><span class="line">c.eat();</span><br><span class="line">c.think();</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//测试</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="type">Human</span> <span class="variable">human</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Human</span>();</span><br><span class="line">test.testCreature(human);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口举例（3）</span></span><br><span class="line"><span class="comment">//接口类，只声明方法，不实现,子类必须全部实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">People</span> &#123;</span><br><span class="line"><span class="comment">//讲话</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//睡觉</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//男人类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">implements</span> <span class="title class_">People</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Man speaks!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Man sleeps!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//自己的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Man eats&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//女人类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Woman</span> <span class="keyword">implements</span> <span class="title class_">People</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Woman speaks!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Woman sleeps!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自己的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Woman eats&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPeople</span><span class="params">(People p)</span> &#123;</span><br><span class="line">p.sleep();</span><br><span class="line">p.speak();</span><br><span class="line"><span class="comment">//p.eat() //报错，不能调用子类独有的方法</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//测试</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">Man man= <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">test.testPeople(man);</span><br><span class="line"></span><br><span class="line">Woman woman=<span class="keyword">new</span> <span class="title class_">Woman</span>();</span><br><span class="line">test.testPeople(woman);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;前提&lt;/strong&gt;：&lt;strong&gt;继承&lt;/strong&gt;（实现）、&lt;strong&gt;覆盖&lt;/strong&gt;（override）、&lt;strong&gt;向上转型&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;：通过允许向上转型，实现动态</summary>
      
    
    
    
    
    <category term="OOP" scheme="http://example.com/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://example.com/2023/10/15/test/"/>
    <id>http://example.com/2023/10/15/test/</id>
    <published>2023-10-15T07:11:54.000Z</published>
    <updated>2023-10-15T07:11:54.239Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>浅谈观察者模式</title>
    <link href="http://example.com/2023/10/15/observer/"/>
    <id>http://example.com/2023/10/15/observer/</id>
    <published>2023-10-15T02:19:10.000Z</published>
    <updated>2023-10-17T08:29:44.981Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写在前头：希望你了解到的不仅是模式，而学会用OOP的眼光分析问题，解决问题</strong></p><p><strong>关键字</strong>：一对多，变化通知 、push&amp;pull</p><p><strong>描述</strong>： 观察者模式、订阅发布模式</p><p><strong>原则</strong>：  好莱坞原则</p><p><strong>示例</strong>：  图形编程、股票涨跌、订阅发布</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 股票涨跌</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//观察者接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Stock stock, Object arg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//散户</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrivateInvestor</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Stock stock, Object arg)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;PrivateInvestor: Current price:&quot;</span> +stock.getPrice()+<span class="string">&quot;, Sell 100!&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;State:&quot;</span>+arg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//投资机构</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstitutionInvestor</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Stock stock, Object arg)</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;InstitutionInvestor: Current price:&quot;</span> +stock.getPrice()+<span class="string">&quot;, Sell 1000!&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;State:&quot;</span>+arg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//股票类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stock</span> &#123;</span><br><span class="line"><span class="comment">//所有关注股票的观察者的集合</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Observer&gt; observers= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Observer&gt;();</span><br><span class="line"><span class="comment">//股票价格</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Stock</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.price=price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通知所有观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllObservers</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(Observer observer: observers) &#123;</span><br><span class="line">observer.update(<span class="built_in">this</span>,<span class="string">&quot;all ok!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">observers.add(observer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//移除观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Object observer)</span> &#123;</span><br><span class="line">observers.remove(observer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改变价格</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> p)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.price=p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.price&gt;<span class="number">80</span> || <span class="built_in">this</span>.price&lt;<span class="number">10</span>) &#123;</span><br><span class="line">notifyAllObservers();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Stock stock=<span class="keyword">new</span> <span class="title class_">Stock</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">stock.addObserver(<span class="keyword">new</span> <span class="title class_">PrivateInvestor</span>());</span><br><span class="line">stock.addObserver(<span class="keyword">new</span> <span class="title class_">InstitutionInvestor</span>());</span><br><span class="line"></span><br><span class="line">stock.setPrice(<span class="number">100</span>);</span><br><span class="line">stock.setPrice(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 订阅发布</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Object arg)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(Subject s)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Subject&gt; observers= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> String name=<span class="string">&quot;none&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> String info=<span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Subject s, String name)</span> &#123;</span><br><span class="line">s.addObserver(<span class="built_in">this</span>);</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(Subject s)</span> &#123;</span><br><span class="line">observers.add(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInfo</span><span class="params">(String info)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.info = info;</span><br><span class="line">notifyAllObservers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">System.out.println(arg+<span class="string">&quot; to &quot;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllObservers</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Subject o: observers) &#123;</span><br><span class="line">o.update(<span class="built_in">this</span>.name+<span class="string">&quot;: &quot;</span>+<span class="built_in">this</span>.getInfo());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">User user1=<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;User1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//user2 观察 user1</span></span><br><span class="line">User user2=<span class="keyword">new</span> <span class="title class_">User</span>(user1, <span class="string">&quot;User2&quot;</span>);</span><br><span class="line">user1.setInfo(<span class="string">&quot;I have updated!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//user2添加观察者user3, user3 观察user2</span></span><br><span class="line">user2.addObserver(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;User3&quot;</span>));</span><br><span class="line">user2.setInfo(<span class="string">&quot;I got mistake!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">user1.addObserver(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;user0&quot;</span>+i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user1.setInfo(<span class="string">&quot;I have the second time updated!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;写在前头：希望你了解到的不仅是模式，而学会用OOP的眼光分析问题，解决问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：一对多，变化通知 、push&amp;amp;pull&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;： 观察</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈状态模式</title>
    <link href="http://example.com/2023/10/13/state/"/>
    <id>http://example.com/2023/10/13/state/</id>
    <published>2023-10-13T02:21:03.000Z</published>
    <updated>2023-10-17T08:30:24.302Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写在前头：希望你了解到的不仅是模式，而学会用OOP的眼光分析问题，解决问题</strong>  </p><p><strong>关键字</strong>：封装变化</p><p><strong>描述</strong>：避免if与switch语句。分离抽象出状态，再通过组合建立联系</p><p><strong>原则</strong>：往往需要修改的，就是需要封装的，需要明确职责的；就需要考虑单一职责和开放封闭原则。</p><p><strong>示例</strong>：pull &amp; push改变把手行为颜色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//状态接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pull</span><span class="params">(PaintBoard paintBoard)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(PaintBoard paintBoard)</span>;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//红色状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pull</span><span class="params">(PaintBoard paintBoard)</span> &#123;</span><br><span class="line"></span><br><span class="line">paintBoard.setState(<span class="keyword">new</span> <span class="title class_">YellowState</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(PaintBoard paintBoard)</span> &#123;</span><br><span class="line"></span><br><span class="line">paintBoard.setState(<span class="keyword">new</span> <span class="title class_">GreenState</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;RED&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绿色状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreenState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pull</span><span class="params">(PaintBoard paintBoard)</span> &#123;</span><br><span class="line"></span><br><span class="line">paintBoard.setState(<span class="keyword">new</span> <span class="title class_">RedState</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(PaintBoard paintBoard)</span> &#123;</span><br><span class="line"></span><br><span class="line">paintBoard.setState(<span class="keyword">new</span> <span class="title class_">YellowState</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Green&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//黄色状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YellowState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pull</span><span class="params">(PaintBoard paintBoard)</span> &#123;</span><br><span class="line"></span><br><span class="line">paintBoard.setState(<span class="keyword">new</span> <span class="title class_">GreenState</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(PaintBoard paintBoard)</span> &#123;</span><br><span class="line"></span><br><span class="line">paintBoard.setState(<span class="keyword">new</span> <span class="title class_">RedState</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Yellow&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaintBoard</span> &#123;</span><br><span class="line"><span class="comment">//默认为红色</span></span><br><span class="line"><span class="keyword">private</span> State state;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PaintBoard</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.state=<span class="keyword">new</span> <span class="title class_">RedState</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造 可以指定初始颜色</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PaintBoard</span><span class="params">(State state)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.state=state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//委托给状态对象处理，以后添加修改，可以不用修改此段代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">()</span> &#123;</span><br><span class="line">state.push(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//委托给状态对象处理，以后添加修改，可以不用修改此段代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pull</span><span class="params">()</span> &#123;</span><br><span class="line">state.pull(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(State state)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.state=state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查看当前状态颜色</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCurrentClolor</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> state.name();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line">PaintBoard paintBoard= <span class="keyword">new</span> <span class="title class_">PaintBoard</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;Origin Color:&quot;</span>+paintBoard.getCurrentClolor());</span><br><span class="line"><span class="comment">//pull测试</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">System.out.print(paintBoard.getCurrentClolor());</span><br><span class="line">paintBoard.pull();</span><br><span class="line">System.out.println(<span class="string">&quot;-&gt;pull-&gt;&quot;</span>+paintBoard.getCurrentClolor());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//push测试</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line">System.out.print(paintBoard.getCurrentClolor());</span><br><span class="line">paintBoard.push();</span><br><span class="line">System.out.println(<span class="string">&quot;-&gt;pull-&gt;&quot;</span>+paintBoard.getCurrentClolor());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;写在前头：希望你了解到的不仅是模式，而学会用OOP的眼光分析问题，解决问题&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：封装变化&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;：避免if与switch语句。分离抽象出状</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈适配器模式</title>
    <link href="http://example.com/2023/10/13/adapter/"/>
    <id>http://example.com/2023/10/13/adapter/</id>
    <published>2023-10-13T02:19:38.000Z</published>
    <updated>2023-10-17T08:30:54.543Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写在前头：希望你了解到的不仅是模式，而学会用OOP的眼光分析问题，解决问题</strong></p><p><strong>关键字</strong>：连接</p><p><strong>描述</strong>：适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</p><p><strong>原则</strong>：OFC,单一职责</p><p><strong>区别</strong>：与代理模式的区别</p><p><strong>示例</strong>：充电口转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//美国工具接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">USATool</span> &#123;</span><br><span class="line"><span class="comment">//工具运行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//美国充电器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">USACharger</span> <span class="keyword">implements</span> <span class="title class_">USATool</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;insert to usa interface success!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中国工具接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ChinaTool</span> &#123;</span><br><span class="line"><span class="comment">//工具运行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String type)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配器器类（转换中国接口）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdapterChager</span> <span class="keyword">implements</span> <span class="title class_">ChinaTool</span> &#123;</span><br><span class="line"><span class="comment">//能转接美国充电口</span></span><br><span class="line"><span class="keyword">private</span> USATool usaChager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String type)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(type.equalsIgnoreCase(<span class="string">&quot;usatype&quot;</span>)) &#123;</span><br><span class="line">usaChager =<span class="keyword">new</span> <span class="title class_">USACharger</span>();</span><br><span class="line">usaChager.run();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;At present, can&#x27;t connect to this interface!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中国充电器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChinaCharger</span> <span class="keyword">implements</span> <span class="title class_">ChinaTool</span> &#123;</span><br><span class="line"><span class="comment">//可以连接适配器</span></span><br><span class="line"><span class="keyword">private</span> ChinaTool adapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String type)</span> &#123;</span><br><span class="line"><span class="comment">//中国接口，无需使用适配器</span></span><br><span class="line"><span class="keyword">if</span>(type.equalsIgnoreCase(<span class="string">&quot;chinatype&quot;</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;insert to china interface success!&quot;</span>);</span><br><span class="line"><span class="comment">//美国接口，需要使用适配器</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(type.equalsIgnoreCase(<span class="string">&quot;usatype&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">//这里相当于 责任托付，具体连接交给适配器去做</span></span><br><span class="line">adapter = <span class="keyword">new</span> <span class="title class_">AdapterChager</span>();</span><br><span class="line">adapter.run(type);</span><br><span class="line"><span class="comment">//不能识别的接口</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;At present, can&#x27;t connect to this interface!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">ChinaCharger charger= <span class="keyword">new</span> <span class="title class_">ChinaCharger</span>();</span><br><span class="line"></span><br><span class="line">charger.run(<span class="string">&quot;chinatype&quot;</span>);</span><br><span class="line"></span><br><span class="line">charger.run(<span class="string">&quot;usatype&quot;</span>);</span><br><span class="line"></span><br><span class="line">charger.run(<span class="string">&quot;othertype&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;写在前头：希望你了解到的不仅是模式，而学会用OOP的眼光分析问题，解决问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：连接&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;：适配器模式使得原本由于接口不兼容而不能一起工作的</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈代理模式</title>
    <link href="http://example.com/2023/10/11/proxy/"/>
    <id>http://example.com/2023/10/11/proxy/</id>
    <published>2023-10-11T12:24:51.000Z</published>
    <updated>2023-10-17T08:30:04.676Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写在前头：希望你了解到的不仅是模式，而学会用OOP的眼光分析问题，解决问题</strong></p><p><strong>关键字</strong>：控制  </p><p><strong>描述</strong>： 通过实现相同接口（保证行为相同），通过组合方式，对被代理者实现控制</p><p><strong>原则</strong>：  单一职责</p><p><strong>区别</strong>：  代理模式强调在<strong>非功能性</strong>方面的控制，装饰模式强调<strong>加强</strong>同一类功能</p><p><strong>示例</strong>：  买票，代理点，远程访问  </p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//票的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">showFee</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真正的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealTrainTicket</span> <span class="keyword">implements</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line"><span class="comment">//实际价格</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> fee=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//返回实际价格</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">showFee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.fee;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTrainTicket</span> <span class="keyword">implements</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line"><span class="comment">//被代理的对象</span></span><br><span class="line"><span class="keyword">private</span> Ticket tt;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProxyTrainTicket</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.tt= <span class="keyword">new</span> <span class="title class_">RealTrainTicket</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//经过代理之后的价格</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">showFee</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.tt.showFee()*<span class="number">1.2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Ticket realtrainticket= <span class="keyword">new</span> <span class="title class_">RealTrainTicket</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;RealTrainTicket&#x27;s fee is &quot;</span>+realtrainticket.showFee());</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">Ticket proxytrainticket= <span class="keyword">new</span> <span class="title class_">ProxyTrainTicket</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;proxytrainticket&#x27;s fee is &quot;</span>+ proxytrainticket.showFee());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;写在前头：希望你了解到的不仅是模式，而学会用OOP的眼光分析问题，解决问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：控制  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;描述&lt;/strong&gt;： 通过实现相同接口（保证行为相同），通过组合</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈装饰者模式</title>
    <link href="http://example.com/2023/10/08/decorator/"/>
    <id>http://example.com/2023/10/08/decorator/</id>
    <published>2023-10-08T15:00:34.000Z</published>
    <updated>2023-10-17T08:30:41.762Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写在前头：希望你了解到的不仅是模式，而学会用OOP的眼光分析问题，解决问题。</strong></p><p><strong>关键字</strong>：<strong>允许向一个现有的对象添加新的功能，同时又不改变其结构</strong>。</p><p><strong>描述</strong>:：通过实现相同的接口(<strong>保证行为相同</strong>)跟组合，实现对方法的增强；是继承的一个替代模式，之所以使用装饰器，不使用继承，也是对OCP和优先使用合成而非继承原则的遵守。</p><p><strong>原则</strong>：开放封闭（OCP）,优先使用合成而非继承，单一职责原则。</p><p><strong>区别</strong>：代理模式强调的是对实际对象的<strong>控制</strong>，是客户对象与实际对象增加一个中间层。装饰者像是给实际对象的套上了一个壳子，使其一些功能得到了<strong>增强与升级</strong>。</p><p><strong>示例</strong>：不同皮肤的英雄  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//英雄类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//英雄皮肤</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">skin</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//...其他方法与属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GLun</span> <span class="keyword">implements</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">GLun</span><span class="params">()</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//原始皮肤对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">skin</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hero is origin skin!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//...其他方法与属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰器抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HeroDecorator</span> <span class="keyword">implements</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//包含原始对象</span></span><br><span class="line"><span class="keyword">protected</span> Hero hero;</span><br><span class="line"><span class="comment">//组合需要包装的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroDecorator</span><span class="params">(Hero hero)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.hero = hero;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...其他方法与属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GLun_legend</span> <span class="keyword">extends</span> <span class="title class_">HeroDecorator</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">GLun_legend</span><span class="params">(Hero hero)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(hero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传奇皮肤对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">skin</span><span class="params">()</span> &#123;</span><br><span class="line">setLegendSkin(hero);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setLegendSkin</span><span class="params">(Hero hero)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hero is updated to legendSkin!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Hero glun= <span class="keyword">new</span> <span class="title class_">GLun</span>();</span><br><span class="line">glun.skin();</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">Hero glun1= <span class="keyword">new</span> <span class="title class_">GLun_legend</span>(<span class="keyword">new</span> <span class="title class_">GLun</span>());</span><br><span class="line">glun1.skin();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;写在前头：希望你了解到的不仅是模式，而学会用OOP的眼光分析问题，解决问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键字&lt;/strong&gt;：&lt;strong&gt;允许向一个现有的对象添加新的功能，同时又不改变其结构&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈单例</title>
    <link href="http://example.com/2023/10/08/singleton/"/>
    <id>http://example.com/2023/10/08/singleton/</id>
    <published>2023-10-08T10:16:12.000Z</published>
    <updated>2023-10-11T13:24:54.311Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写在前头：希望你了解到的不仅是模式，而学会用OOP的眼光分析问题，解决问题。</strong></p><ul><li><p>静态单例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最简单的单例，静态单例，在第一次调用get_instance时对象已经创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="comment">//kc：创建静态对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">  <span class="comment">//kc:构造函数私有</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;this is a call without create!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>延时加载单例(线程不安全)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延迟创建对象，第一次调用get_instance时才创建对象，线程不安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">delay_single</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> delay_single instance;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">delay_single</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> delay_single <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//此处线程不安全</span></span><br><span class="line"><span class="keyword">if</span>(instance==<span class="literal">null</span>) &#123;</span><br><span class="line">instance= <span class="keyword">new</span> <span class="title class_">delay_single</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;this is a create call!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;this is a call&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>延时加载单例(线程安全)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延迟创建，与delay_single的差别在于，引入了synchronized，线程安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">delay_singleton2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> delay_singleton2 instance;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">delay_singleton2</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="comment">//synchronized关键字，保证线程安全</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> delay_singleton2 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="literal">null</span>) &#123;</span><br><span class="line">instance= <span class="keyword">new</span> <span class="title class_">delay_singleton2</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;写在前头：希望你了解到的不仅是模式，而学会用OOP的眼光分析问题，解决问题。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态单例&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>python1</title>
    <link href="http://example.com/2022/10/08/Python/"/>
    <id>http://example.com/2022/10/08/Python/</id>
    <published>2022-10-08T10:16:12.000Z</published>
    <updated>2023-10-11T10:37:29.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><blockquote><p>Python IDE</p></blockquote><ul><li><p>visual studio code(VsCode) </p></li><li><p>PyCharm</p></li><li><p>IDLE(Shell)</p></li></ul><blockquote><p>Python 爬虫相关积累</p></blockquote><ul><li><p>urllib(python3,urllib进行了统一)</p><ul><li>Request(请求)：构造代理</li><li>Parse(解析)</li></ul></li><li><p>BeautifulSoup   </p><ul><li>BeautifulSoup(解析网页)，操控标签      </li><li>网页解析误区:(<a href="https://zhidao.baidu.com/question/503566841.html">Some characters could not be decoded, and were replaced with REPLACEMENT CHARACTER.</a>)</li></ul></li><li><p>re</p><table><thead><tr><th align="center">方法</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">Compile</td><td align="center">compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象</td></tr><tr><td align="center">Sub</td><td align="center">用pattern的匹配项替换字符串中的指定字符</td></tr><tr><td align="center">Match</td><td align="center">尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none</td></tr><tr><td align="center">Finall</td><td align="center">在字符串中找到正则表达式所匹配的所有子串，并返回一个列表</td></tr><tr><td align="center">Split</td><td align="center">用pattern匹配的串分割字符串，返回列表</td></tr><tr><td align="center">Search</td><td align="center">扫描整个字符串并返回第一个成功的匹配</td></tr></tbody></table><p> 参考网站：<a href="https://www.cnblogs.com/hongbo-tao/p/11853643.html">正则表达式基础</a> <a href="https://www.runoob.com/python3/python3-reg-expressions.html">菜鸟教程</a></p></li><li><p>file(文件操作)[^3]</p><table><thead><tr><th align="center">方法</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center">Open</td><td align="center">打开一个文件，并返回文件对象</td></tr><tr><td align="center">Read</td><td align="center">从文件读取指定的字节数，如果未给定或为负则读取所有</td></tr><tr><td align="center">Write</td><td align="center">将字符串写入文件，返回的是写入的字符长度</td></tr><tr><td align="center">Close</td><td align="center">关闭文件对象</td></tr></tbody></table></li></ul><p>参考网站:<a href="https://www.runoob.com/python3/python3-file-methods.html">菜鸟教程</a></p><ul><li><p>Selenium</p><p> webdriver(模拟浏览器)：可抓取动态页面;在连续加载web页面时，应设置加载等待（显示等待WebDriverWait,，隐式等待implicitly_wait，强制等待(sleep)），否则在进行页面内容获取操作时，会得不到相关内容</p><p> 参考网站：<a href="http://www.selenium.org.cn/1598.html">官方教程</a> <a href="https://blog.csdn.net/weixin_36279318/article/details/79475388">CSDN教程</a></p></li><li><p>xlwt</p><ul><li>Workbook(构造xls对象)：创建workbook、</li><li>Add_sheet</li><li>Write,read</li></ul></li><li><p>Ajax( Asynchronous JavaScript and XML)在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容</p></li><li><p><a href="https://baike.baidu.com/item/aspx/203251?fr=aladdin">aspx</a>:aspx文件是微软的在<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>端运行的<a href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5">动态网页</a>文件，而不像静态的html文件。</p></li><li><p>多行语句的写法</p><pre><code> 1：:每行以\结尾，\为续行符 2：（），[], &#123;&#125;中无需使用\ 3：多行字符串（使用3引号或3双引号）：&quot;&quot;&quot; &quot;&quot;&quot;, &#39;&#39;&#39; &#39;&#39;&#39;,也可作为多行注释</code></pre></li><li><p>Lxml(css选择器 )</p><table><thead><tr><th align="center">操作</th><th align="center">方法</th></tr></thead><tbody><tr><td align="center">选择所有标签</td><td align="center">*</td></tr><tr><td align="center">选择<a>标签</td><td align="center">a</td></tr><tr><td align="center">选择所有class&#x3D;”link”的元素</td><td align="center">.link</td></tr><tr><td align="center">选择class&#x3D;”link”的<a>标签</td><td align="center">a.link</td></tr><tr><td align="center">选择id&#x3D;”home”的<a>标签</td><td align="center">a#home</td></tr><tr><td align="center">选择父元素为<a>标签的所有<span>标签</td><td align="center">a &gt; span</td></tr><tr><td align="center">选择<a>标签内部所有<span></td><td align="center">a span</td></tr><tr><td align="center">选择title属性为“home”的所有<a>标签</td><td align="center">a[titile&#x3D;Home]</td></tr></tbody></table></li></ul><p>​       参考网址<a href="https://lxml.de/">官网教程</a></p><blockquote><p>数据库</p></blockquote><ul><li><p>mysql</p><ol><li>python3可使用：pymysql</li><li>sql语句的参数传递时，参数在字符串以外，理念同于C(printf(“%s %d % f”,string, int, float))</li><li>Mysql语句中的占位符均为%s,</li><li>Mysql的端口号为3306</li><li>(Unknown column ‘xxxx’ in ‘field list’”)解决方法：在MySQL中，不论是更新还是插入一个字符，得用‘str’，而不是直接str，即获取字符串接收的方式是’str‘</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;python&quot;&gt;&lt;a href=&quot;#python&quot; class=&quot;headerlink&quot; title=&quot;python&quot;&gt;&lt;/a&gt;python&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Python IDE&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>浅谈字符</title>
    <link href="http://example.com/2020/09/29/%E6%B5%85%E8%B0%88%E5%AD%97%E7%AC%A6/"/>
    <id>http://example.com/2020/09/29/%E6%B5%85%E8%B0%88%E5%AD%97%E7%AC%A6/</id>
    <published>2020-09-29T10:18:42.000Z</published>
    <updated>2023-10-10T09:25:30.133Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="首先了解下ASCII"><a href="#首先了解下ASCII" class="headerlink" title="首先了解下ASCII"></a>首先了解下ASCII</h4></blockquote><ul><li><p><a href="https://baike.baidu.com/item/ASCII/309296?fr=aladdin">ASCII</a> (American Standard Code for Information Interchange): 美国信息交换标准代码</p></li><li><p>在计算机中，所有数据的存储都适用二进制数来表示，因为计算机用高低电平来表示1与0；例如，像a、b、c、d这样的52个字母（包括大写）以及0、1等数字还有一些常用的符号（例如*、#、@等）在计算机中存储时也要使用二进制数来表示，ASCII编码就是美国（ANSI）出台的供不同计算机在相互通信时共同遵守的西文字符编码标准，后来被ISO定为国际标准，适用于所有拉丁字母。</p></li><li><p>起初，ASCII由七位表示，共可以表示128个字符；后在进化为由8位表示，可以表示256个字符。</p></li><li><p>通俗的讲，该编码规则就是用简单的数字来特殊表示我们常用的一些字符（字母，符号，数字）,例如：可以这样讲，在ASCII编码下，数字0就表示NULL，整数48就表示字符0</p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj7rbfcz6uj30l8077t9p.jpg" style="zoom:80%;" /><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj7rbgx8kzj30l80773zd.jpg" style="zoom:80%;" />  [ASCII对照表](http://ascii.911cha.com)</li></ul><blockquote><h3 id="编程语言-C-中的字符"><a href="#编程语言-C-中的字符" class="headerlink" title="编程语言(C)中的字符"></a>编程语言(C)中的字符</h3></blockquote><ul><li><p>C语言中，也用ASCII字符集来表示基本字符，一个字符类型char用一字节（8位）表示。</p></li><li><p>字符字面量用单引号，里面包含一个或多个字符；如：’a’,’123’都是有效的字符字面量；</p></li><li><p>C11规定，一个字符字面量具有int类型（意为当我们可以把一个字符当作int类型来操作，如果我们想的话），如果将一个字符字面量赋值给一个char类型，那么将该字符字面量的最低有效位赋值给它。可以理解为字符类型只能够识别8位的数据，所以当使用多字符字面量或者int类型赋值给字符变量和想用字符形式表示时，都采用上述方法。</p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj7qruchxcj30ho09440b.jpg" style="zoom:80%;" /><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj7qrwlyw1j30as03caac.jpg" style="zoom:80%;" /></li><li><p>不是所有的字符字面量都能回显在显示台，如控制字符’\n’,’\t’之类的特殊字符。</p></li><li><p>用\后面紧跟1到3个八进制数，来用8进制编码表示一个字符，如：\7、\12、\123；用\x后面跟一个16进制数来用16进制编码表示一个字符,如：\x0a、\x30。</p></li><li><p>#在8位的范围内，char与int类型（无符号）可以看作兼容的#</p></li></ul><blockquote><h3 id="其他字符编码"><a href="#其他字符编码" class="headerlink" title="其他字符编码"></a>其他字符编码</h3></blockquote><ul><li>Unicode</li><li>GB2312(汉字编码)</li><li>GBK</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;h4 id=&quot;首先了解下ASCII&quot;&gt;&lt;a href=&quot;#首先了解下ASCII&quot; class=&quot;headerlink&quot; title=&quot;首先了解下ASCII&quot;&gt;&lt;/a&gt;首先了解下ASCII&lt;/h4&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a</summary>
      
    
    
    
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>浅谈浮点数</title>
    <link href="http://example.com/2020/07/17/%E6%B5%85%E8%B0%88%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    <id>http://example.com/2020/07/17/%E6%B5%85%E8%B0%88%E6%B5%AE%E7%82%B9%E6%95%B0/</id>
    <published>2020-07-17T15:14:22.000Z</published>
    <updated>2023-10-10T09:25:54.872Z</updated>
    
    <content type="html"><![CDATA[<h4 id="——浅谈浮点数"><a href="#——浅谈浮点数" class="headerlink" title="——浅谈浮点数"></a>——浅谈浮点数</h4><blockquote><p><strong>计算机中的整数,小数</strong></p></blockquote><ul><li><p><em>整数，通俗的讲就是在各进制下；数的组成全由（1，2，3…..）等整数组成；不存在小数（分数）部分或小数部分为0，在计算机中所有的整数由0,1组成，表示成二进制数并储存在存储设备中</em>；</p></li><li><p><em>小数是一种特殊的实数，在数值计算中有至关重要的作用；小数也可以表示成二进制，如：0.125就等于0.001；小数点将小数分成整数与小数两部分，可是在计算机中，机器只认识0，1；那么我们怎么在计算机中存储小数点呢？</em></p></li></ul><hr><blockquote><p><strong>浮点数</strong></p></blockquote><ul><li><p>浮点数的引入解决了小数在机器中存储的问题，但其作用却不止于此；</p><p>​                                    <em>浮点数不是就代表小数！！！</em></p></li><li><p><em>官方解释：浮点数，是属于<a href="https://baike.baidu.com/item/%E6%9C%89%E7%90%86%E6%95%B0/105546">有理数</a>中某特定<a href="https://baike.baidu.com/item/%E5%AD%90%E9%9B%86/5017034">子集</a>的数的数字表示，在计算机中用以近似表示任意某个<a href="https://baike.baidu.com/item/%E5%AE%9E%E6%95%B0/296419">实数</a>。具体的说，这个实数由一个<a href="https://baike.baidu.com/item/%E6%95%B4%E6%95%B0/1293937">整数</a>或<a href="https://baike.baidu.com/item/%E5%AE%9A%E7%82%B9%E6%95%B0/11030127">定点数</a>（即<a href="https://baike.baidu.com/item/%E5%B0%BE%E6%95%B0/6244963">尾数</a>）乘以某个基数（计算机中通常是2）的整数次幂得到，这种表示方法类似于基数为10的<a href="https://baike.baidu.com/item/%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95/756685">科学计数法</a>。</em></p><ul><li><em>引入角度1: 浮点数既然可以在计算机中近似表示某个实数，那么就可以解决小数的问题</em></li><li><strong>角度2: 在一些16，32位的机器中，可是利用浮点数表示法近似表示更大或更小的数（实数范围上），如：6.023*10<sup>23</sup>(摩尔常数)</strong></li></ul></li><li><p>定点数与浮点数</p><ul><li><p><em>定点数的含义是，在计算机中，我们表示一个实数的整数部分与小数部分的精度是固定的；比如在16位的系统中，可能用8位表示整数部分，8位表示小数部分（也可以其他分法）；但这个方法有明显的局限性；比如，以上定点数只能表示（0，2<sup>8</sup>-1）,(-2<sup>8</sup>, 2<sup>7</sup>-1)范围内的数。</em></p></li><li><p><em>浮点数的定义相对于定点数，我们不固定小数点的位置，以实现更大的精度</em></p></li></ul></li></ul><hr><blockquote><p><strong>浮点数在计算机中的表示</strong></p></blockquote><ul><li><p>IEEE标准</p><ul><li><p>浮点数的一般二进制表示法：整数部分第n位就表示2<sup>n</sup>，n从第0位开始计;小数部分第m位表示2<sup>-m</sup>，m从1开始计：0.125就等于0.001；</p></li><li><p>将实数转化为IEEE754标准规格化的浮点数</p><ol><li><p><em>确定符号位（0，1）</em></p></li><li><p><em>将该数写成一般的二进制小数形式</em></p></li><li><p><em>用二进制科学计数法表示该数，将小数点放在从左往右数第一个1后边。</em></p><p>n&#x3D; m * 2<sup>e</sup></p></li><li><p><em>尾数即为小数点后那串二进制数；阶码即上述得到的指数加上偏差值所得的和（32位中为127，64位中为1024）</em></p></li></ol></li></ul></li><li><p>IEEE754规格化浮点数</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj0s2sk5acj30fy019a9v.jpg"></p></li><li><p>32位浮点数(float 单精度)</p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj0rxll3htj30e9033wed.jpg" style="zoom:80%;" /></li><li><p>64位浮点数（double 双精度）</p></li></ul><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj0rwy9ykhj30e9036a9y.jpg" style="zoom:80%;"/><p>​<em>从图中可以看出，无论是32位系统，还是64位；他们的后23位或52位来表示转换成科学计数后的小数部分，他们可以无限接近一，但永远小于1；并且对于一些不能用2的幂表示的小数，无论用多少位来表示，也不可能取到完全相等的一个值，只能是在有限位数下得到一个最近它的数，所以计算机中，浮点数是用于近似的表示某个任意的实数。</em></p><ul><li>long double(拓展双精度浮点，80bit)</li></ul><hr><blockquote><p><strong>浮点数详细讲解</strong></p></blockquote><ul><li><p>浮点数间进行运算可能会造成误差</p><p><em>因为一个浮点数的真正值只是表达预期值的一个近似值（部分小数部分可以由2的幂组成的浮点数忽略），其精度取决于不同的系统位数，在进行运算的过程中，可能会产生细微的误差（近似值会改变），并随着运算次数不断积累。有时候，为避免这种误差我们可以将其转换为整数运算（特别是python中，python支持无限制，且准确的整数运算）</em></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj1xo5f5xmj30mh07umyl.jpg"></p></li><li><p>两个浮点数进行比较时，可能会产生不可预期的错误</p><p><em>鉴于浮点数之间进行运算可能会产生误差，自然如果我们在某些时候将两个浮点数来进行比较也是有风险的</em></p><p><strong>上述代码输出如下</strong></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gj1xokd0zoj30ho02gwev.jpg"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;——浅谈浮点数&quot;&gt;&lt;a href=&quot;#——浅谈浮点数&quot; class=&quot;headerlink&quot; title=&quot;——浅谈浮点数&quot;&gt;&lt;/a&gt;——浅谈浮点数&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;计算机中的整数,小数&lt;/strong&gt;&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯1</title>
    <link href="http://example.com/2020/07/17/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A31/"/>
    <id>http://example.com/2020/07/17/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E8%A7%A31/</id>
    <published>2020-07-17T15:14:22.000Z</published>
    <updated>2023-10-10T09:26:39.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="蓝桥杯快来了，给大家分享一道蓝桥杯的题目"><a href="#蓝桥杯快来了，给大家分享一道蓝桥杯的题目" class="headerlink" title="蓝桥杯快来了，给大家分享一道蓝桥杯的题目"></a>蓝桥杯快来了，给大家分享一道蓝桥杯的题目</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>小明想知道，满足以下条件的<strong>正整数</strong>序列的<strong>数量</strong>：</p><ol><li>第一项为 n；</li><li>第二项不超过 n；</li><li>从第三项开始，每一项小于前两项的差的绝对值。<br>请计算，对于给定的 n，有多少种满足条件的序列。<br>【输入格式】<br>输入一行包含一个整数 n。<br>【输出格式】<br>输出一个整数，表示答案。答案可能很大，请输出答案除以10000的余数。</li></ol><p>【样例输入】<br>4<br>【样例输出】<br>7<br>【样例说明】<br>以下是满足条件的序列：<br>4 1<br>4 1 1<br>4 1 2<br>4 2<br>4 2 1<br>4 3<br>4 4<br>【评测用例规模与约定】<br>对于 20% 的评测用例，1 &lt;&#x3D; n &lt;&#x3D; 5；<br>对于 50% 的评测用例，1 &lt;&#x3D; n &lt;&#x3D; 10；<br>对于 80% 的评测用例，1 &lt;&#x3D; n &lt;&#x3D; 100；<br>对于所有评测用例，1 &lt;&#x3D; n &lt;&#x3D; 1000。</p><h4 id="题解基本思路（看不懂的可以直接看Summarize）"><a href="#题解基本思路（看不懂的可以直接看Summarize）" class="headerlink" title="题解基本思路（看不懂的可以直接看Summarize）"></a>题解基本思路（看不懂的可以直接看Summarize）</h4><ul><li>首先从样例输出来看，该序列的<strong>长度</strong>至少为<strong>2</strong></li><li>用递归枚举的方法来做这道题肯定是很耗时的，所以采用一点动态规划的思想</li><li>First, 先考虑长度为2的序列, n1 n2;类似于 <em>1 1，2 1， 2 2</em>这样。</li><li>Second,  我们考虑长度为3的序列，从样例来看，类似于 <em>4 1 1,  4 2 1，4 1 2</em> 这样的序列；我们只需观察该序列中的2，3两位，你会发现有熟悉 <em>1 1, 2 1</em>,他们属于我们n&#x3D;1,n&#x3D;2中符合条件的序列，也就是First中的情况；但是，你也会发现这里误入了一个 <em>1 2</em>，它似乎就让我们有点陌生了。</li><li>Then，我们在考虑长度为4的序列… 哈哈哈,皮一下，其实我们考虑以上两种情况就足以了。</li></ul><h5 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h5><ul><li>刚刚只是给大家引了下路，这里给大家举个例子，对于给定的数字n，我用f(a，b)表示序列以a,b开头的序列的个数，如f(1,1)&#x3D;1, f(4,1)&#x3D;3，这个可以简单的笔算出来。</li><li>规律就是，如果我们想知道所有 以<em>5 2 …<em>开头的序列的个数，我们是不是只需要知道以</em>2 1, 2,2</em>开头的序列的个数和就行了呢?（<strong>因为从第三项开始，每一项小于前两项的差的绝对值</strong>）而要知道 <em>2 1, 2,2</em>开头序列的个数,就可以从第一步轻松得到；即使上升一个较大的数值n，我们也能够递推至最小的子问题，只要我们将每种不同开头的个数储存起来，就能避免很多的重复运算，接着往下看</li><li>在用二维数组处理时，我们<strong>假设</strong> <em>1 2</em>（ 1 4）这样特殊的”开头”的序列存在，他们用来储存 n3&lt;n2 时对应序列的值,这样就可以和上面统一了。对于如何得到这个值，如求1 4 这样开头的序列，<strong>我们只需在多处理一步</strong>，就又变成了4 1, 4  2这样我们熟悉的处理了。</li></ul><h4 id="python代码实现"><a href="#python代码实现" class="headerlink" title="python代码实现"></a>python代码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">list_count</span>(<span class="params">n</span>):  </span><br><span class="line">  <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        动态规划: 构建 (n+1)*(n+1)整形矩阵</span></span><br><span class="line"><span class="string">        buf[i][j]: (i&gt;=1, j&gt;=1) 表示 i,j..开头的序列</span></span><br><span class="line"><span class="string">        4 1 2 3</span></span><br><span class="line"><span class="string">        n1 n2 n3 n4</span></span><br><span class="line"><span class="string">        由题：n1 &gt; n2, n3&lt;|n1 -n2|</span></span><br><span class="line"><span class="string">        假设，如果将n1去掉后：n2,n3,n4 也满足要求</span></span><br><span class="line"><span class="string">        此时存在情况：</span></span><br><span class="line"><span class="string">        1:</span></span><br><span class="line"><span class="string">            n2=n3, buf[n1][n2]=1</span></span><br><span class="line"><span class="string">        2: </span></span><br><span class="line"><span class="string">            n2&gt;n3, buf[n1][n2]=buf[n2][1]+...+buf[n2][ni] (1&lt;i&lt;n2-n3-1)</span></span><br><span class="line"><span class="string">        3: </span></span><br><span class="line"><span class="string">            n2&lt;n3，取｜n2-n3｜, buf[n1][n2]=buf[n3][1]+...+buf[n3][ni] (1&lt;i&lt;|n2-n3|)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">  </span><br><span class="line">  buf=[[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n+<span class="number">1</span>)]</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="comment">#主处理</span></span><br><span class="line">          <span class="keyword">if</span> i-j&gt;<span class="number">1</span>:</span><br><span class="line">              buf[i][j]+=<span class="number">1</span></span><br><span class="line">              <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i-j):</span><br><span class="line">                  buf[i][j]+=buf[j][k]</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              buf[i][j]+=<span class="number">1</span></span><br><span class="line">          buf[i][j]%=<span class="number">10000</span></span><br><span class="line">         <span class="comment">#辅助处理</span></span><br><span class="line">      <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i):</span><br><span class="line">          buf[x][i]+=<span class="number">1</span></span><br><span class="line">          <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">abs</span>(x-i)):</span><br><span class="line">              buf[x][i]+=buf[i][y]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sum</span>(buf[n])%<span class="number">10000</span></span><br></pre></td></tr></table></figure><p>如图：n&#x3D;5时,buf的值为：</p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gplt8cpfz3j304002wt8q.jpg" style="zoom:150%;" /><p>此方阵可以得到所有i&lt;&#x3D;n的结果，对buf[i]求和</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;蓝桥杯快来了，给大家分享一道蓝桥杯的题目&quot;&gt;&lt;a href=&quot;#蓝桥杯快来了，给大家分享一道蓝桥杯的题目&quot; class=&quot;headerlink&quot; title=&quot;蓝桥杯快来了，给大家分享一道蓝桥杯的题目&quot;&gt;&lt;/a&gt;蓝桥杯快来了，给大家分享一道蓝桥杯的题目&lt;/h3&gt;&lt;</summary>
      
    
    
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Marxism1</title>
    <link href="http://example.com/2020/06/28/Marxism/"/>
    <id>http://example.com/2020/06/28/Marxism/</id>
    <published>2020-06-28T02:29:17.000Z</published>
    <updated>2023-10-10T09:24:33.635Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h1 id="世界的物质性及其发展规律"><a href="#世界的物质性及其发展规律" class="headerlink" title="世界的物质性及其发展规律"></a>世界的物质性及其发展规律</h1></li><li><h3 id="物质"><a href="#物质" class="headerlink" title="物质"></a>物质</h3></li><li><p>物质：<code>不依赖于人的意识而存在，并能为人类的意识所反映的客观存在</code></p></li><li><p>意识：<code>意识是人体的机能和属性，是客观世界的主观映象</code></p></li><li><p>物质与意识的辩证关系：<code>1.物质决定意识 2.意识反作用于物质 3.主观能动性和客观规律性的统一</code></p></li><li><p>世界物质的统一性   <code>1:意识统一与物质：意识的能动性的发挥必须以尊重物质世界的客观规律为前提，其是物质世界中一种特殊的存在； 2: 人类社会也统一与物质：人类社会是物质世界的组成成分、人类获取生活资料的活动是物质性的活动、人类社会存在和发展的基础是物质资料的生产方式</code></p></li><li><h3 id="事物的联系与发展"><a href="#事物的联系与发展" class="headerlink" title="事物的联系与发展"></a>事物的联系与发展</h3></li><li><p>辩证法是用联系和发展的观点看待世界，认为事物是普遍联系和发展变化的，变化的原因在于事物内部的矛盾性。   </p></li><li><h3 id="量变质变规律和否定之否定规律"><a href="#量变质变规律和否定之否定规律" class="headerlink" title="量变质变规律和否定之否定规律"></a>量变质变规律和否定之否定规律</h3></li><li><p>量变与质变的辩证关系<code>1.量变是质变的必要准备2.质变是量变的必然结果 3.量变和质变是相互渗透的</code></p></li><li><p>否定之否定规律的辩证关系：<code>1.辩证的否定观是事物内在矛盾引起的自我否定，是包含肯定的否定；它既是发展的环节，又是联系的环节，即扬弃。在新事物取代旧事物的过程中，辩证的否定是决定性的环节。2.辩证的否定不是一次完成的，而是经历两次否定、三个阶段的有规律的过程，即“肯定一否定一否定之否定”的过程。</code>   </p></li><li><h3 id="唯物辩证法"><a href="#唯物辩证法" class="headerlink" title="唯物辩证法"></a>唯物辩证法</h3></li><li><p>对立统一规律：<code>事物是在对立统一中发展的，其揭示了事物普遍联系的根本内容和发展变化的内在动力，从根本上回答了事物为何会发展的问题</code></p></li><li><p>矛盾的统一性，斗争性，普遍性、特殊性。      </p></li><li><h1 id="实践与认识及其发展规律"><a href="#实践与认识及其发展规律" class="headerlink" title="实践与认识及其发展规律"></a>实践与认识及其发展规律</h1></li><li><h3 id="实践与认识"><a href="#实践与认识" class="headerlink" title="实践与认识"></a>实践与认识</h3></li><li><p>实践: <code>是人类能动的改造世界的社会性的物质活动</code> <code>直接限制性，字节能动性、社会历史性</code></p></li><li><p>认识：<code>主体在实践基础上或通过实践对客体的能动的、创造性的反映。任何认识都是主体与客体相互作用的过程和结果。</code></p></li><li><p><code>感性认识是感觉、知觉、表象三种形式，其特点是直接性和具体性。理性认识是概念、判断、推理等形式，其特点是间接性和抽象性; 两者之间是辩证统一的，感性认识有待遇发展和深化成理性认识、理性认识依赖于感性认识、感性认识和理性认识相互渗透。</code></p></li><li><p>认识到实践的飞跃：<code>①从感性认识发展到理性认识，实现这一飞跃的条件：第一，必须占有丰富真实的感性材料；第二，运用科学思维方法对感性材料进行加工制作。②理性认识向实践：要从实际出发，坚持理论与实践相结合的原则，理论必须被群众掌握，转化为群众的自觉行动。</code></p></li><li><p>实践与认识的辩证运动及其规律：<code>客观事物本身的复杂性及发展过程的无限性，因此，认识的发展要经过“实践、认识、再实践、再认识”的循环往复的过程。</code>   </p></li><li><h3 id="真理与价值"><a href="#真理与价值" class="headerlink" title="真理与价值"></a>真理与价值</h3></li><li><p>真理：<code>真理是指人们对客观事物及其规律的正确</code>**认识(反映)**。</p></li><li><p>真理的客观性：<code>真理的内容是对</code><strong>客观事物</strong><code>及其规律的正确反映，真理中包含着不依赖于人和我人的意识的客观内容</code></p></li><li><p>真理的绝对性与相对性：<strong>绝对性</strong>：<code>真理主客观统一的缺点性和发展的无限性</code><strong>相对性</strong>：<code>在一定条件下，人们对客观事物及其本质和发展归路的正确认识总是有限度的，不完善的</code></p></li><li><p>真理与谬论：</p></li><li><p>真理的检验标准：<code>实践是检验真理的唯一标准,实践具有直接显示性的特点，人们通过实践把思想、理论在现实中实现出来，并把这种实现出来的东西同原来的思想、理论想对照、从而判断其是否正确</code></p></li><li><p>真理与价值的辩证统一：&#96;&#96;   </p></li><li><h3 id="认识世界和改造世界"><a href="#认识世界和改造世界" class="headerlink" title="认识世界和改造世界"></a>认识世界和改造世界</h3></li><li></li><li><h1 id="人类社会及其发展规律"><a href="#人类社会及其发展规律" class="headerlink" title="人类社会及其发展规律"></a>人类社会及其发展规律</h1></li><li><h3 id="社会基本矛盾"><a href="#社会基本矛盾" class="headerlink" title="社会基本矛盾"></a>社会基本矛盾</h3></li><li><p>社会存在,<code>社会生活的物质方面，包括自然地理环境、人口因素、物质生产方式</code></p></li><li><p>社会意识，<code>社会生活的精神方面；根据主体分为：个体意识，群体意识； 根据不同层次：社会心理，社会意识</code></p></li><li><p>生产力：<code>劳动资料，劳动对象，劳动者</code></p></li><li><p>生产关系：<code>进行生产时，人们相互之间的关系与联系</code></p></li><li><p>生产力决定生产关系<code>手推磨产生的是封建主的社会，蒸汽磨产生的是工业资本家的社会</code></p></li><li><p>生产关系对生产力具有能动的反作用，<code>当生产关系适合生产力发展的客观要求时，对生产力的发展起推动作用，当生产关系不适合生产力发展的客观要求时，就会阻碍生产力的发展。</code></p></li><li><p>经济基础，<code>是由社会发展到一定阶段的生产力所决定的生产关系的总和</code></p></li><li><p>上层建筑,<code>是指建立在一定经济基础上的意识形态以及与之相对应的制度、组织、设施</code></p></li><li><p><code>与生产力，生产关系一样，经济基础决定上层建筑，上层建筑反作用于经济基础，当其为适合生产力发展要求的经济基础服务时，就成为推动社会发展的进步力量；反之，当它为落后的经济基础服务时，就成为阻碍社会发展的消极力量</code></p></li><li><p><strong>生产力与生产关系矛盾运动的规律和经济基础和上层建筑矛盾运动的规律，是人类社会发展的一般规律。它们界定了社会形态的更替和历史发展的基本趋势</strong></p></li></ul><p>​     </p><ul><li><h3 id="社会历史发展的动力"><a href="#社会历史发展的动力" class="headerlink" title="社会历史发展的动力"></a>社会历史发展的动力</h3></li></ul><ol><li>社会基本矛盾</li><li>社会主要矛盾</li></ol><ul><li><p>阶级斗争</p></li><li><p>社会革命</p></li><li><p>改革</p></li><li><p>科学技术：<code>生产方式、生产方式、思维方式； 双刃剑</code></p></li><li><h3 id="人民群众的作用"><a href="#人民群众的作用" class="headerlink" title="人民群众的作用"></a>人民群众的作用</h3></li><li><p>唯物史观，<code>群众史观</code></p></li><li><p>唯心史观，<code>英雄史观</code></p></li><li><p><strong>人民群众<code>一切对社会历史发展起推动的人，指社会人口中绝大多数人</code>是历史的创造者</strong></p></li></ul><ol><li>物质财富的创造者</li><li>精神财富的创造者</li><li>社会变革的决定力量</li></ol><ul><li><strong>个人：历史人物，普通个人</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;h1 id=&quot;世界的物质性及其发展规律&quot;&gt;&lt;a href=&quot;#世界的物质性及其发展规律&quot; class=&quot;headerlink&quot; title=&quot;世界的物质性及其发展规律&quot;&gt;&lt;/a&gt;世界的物质性及其发展规律&lt;/h1&gt;&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;物质&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Philosophy" scheme="http://example.com/categories/Philosophy/"/>
    
    
  </entry>
  
  <entry>
    <title>Sassy Girl</title>
    <link href="http://example.com/2020/05/07/My%20Sassy%20Girl/"/>
    <id>http://example.com/2020/05/07/My%20Sassy%20Girl/</id>
    <published>2020-05-07T12:44:54.000Z</published>
    <updated>2023-10-10T09:24:17.349Z</updated>
    
    <content type="html"><![CDATA[<h4 id="My-Sassy-Girl"><a href="#My-Sassy-Girl" class="headerlink" title="My Sassy Girl"></a>My Sassy Girl</h4><p><img src="http://img1.cache.netease.com/cnews/2016/3/3/20160303151045148b3_550.jpg" alt="图标"></p><p>1:You got coffee in cafe, not drink coke or orange juice   </p><p>2: If she struck you, you just pretend feel too hurt, and if it is really hurt, you need pretend nothing   </p><p>3:At the day of you have been met one hundred days, you should give her a rose as a gift in her classroom, she’ll like it   </p><p>4:If she felt uncomfortable about her shoes, you have to change them by your   </p><p>5:She like writing, you gonna encourage her  </p><p>6:I want meet a girl from furture, from my furture   </p><p>7:The destiny is building a brige between you and the people you love   </p><p>8:What do you think about the moment that a woman is most beauty? take off all clothes</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;My-Sassy-Girl&quot;&gt;&lt;a href=&quot;#My-Sassy-Girl&quot; class=&quot;headerlink&quot; title=&quot;My Sassy Girl&quot;&gt;&lt;/a&gt;My Sassy Girl&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://img1.cach</summary>
      
    
    
    
    
    <category term="movie" scheme="http://example.com/tags/movie/"/>
    
  </entry>
  
  <entry>
    <title>three</title>
    <link href="http://example.com/2020/05/03/three/"/>
    <id>http://example.com/2020/05/03/three/</id>
    <published>2020-05-03T12:50:17.000Z</published>
    <updated>2023-10-10T09:20:44.448Z</updated>
    
    <content type="html"><![CDATA[<ul><li>You want to start one thing sometimes, but you always say there is no place or emquipment that you have to need<br>You want to play basketball well and you say there is no ball, there is no playground<br>You want to sing well and you say there is no piano</li><li>You complained<br>You feel dispirited even</li><li>Then<br>Time flies!<br>What happened? Nothing<br>Beacuse you did nothing</li><li>At the same times you have spent<br>The people who has the better condition than you<br>The people like you<br>The people even worse than you<br>They done</li><li>You are still in origin place</li><li>Think about<br>Do you love it<br>What stop you</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;You want to start one thing sometimes, but you always say there is no place or emquipment that you have to need&lt;br&gt;You want to play</summary>
      
    
    
    
    <category term="devotion" scheme="http://example.com/categories/devotion/"/>
    
    
  </entry>
  
  <entry>
    <title>Two</title>
    <link href="http://example.com/2020/04/11/two/"/>
    <id>http://example.com/2020/04/11/two/</id>
    <published>2020-04-11T09:29:26.387Z</published>
    <updated>2020-04-19T09:29:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>2020</p><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><ul><li><p>Framework     架构</p></li><li><p>Architecture  架构</p></li><li><p>Opacity       不透明性，模糊</p></li><li><p>Alignment     对齐</p></li><li><p>Animate       动画，动态</p></li><li><p>Parallel      平行的，同时的</p></li><li><p>Duration      持续时间</p></li><li><p>Configuration 配置，布局，构造，结构</p></li><li><p>Syntax        语法，句法</p></li><li><p>Implicit      隐式的，不直接言明的</p></li><li><p>Delegate      委托，代表，授权</p></li><li><p>Priority      优先级，优先地</p></li><li><p>Constraint    约束，限制</p></li><li><p>Scale         规模，比例       </p></li><li><p>Appearance    外观，外貌</p></li><li><p>Drag          拖动</p></li><li><p>Clip          剪切</p></li><li><p>Paste         粘贴</p></li><li><p>Interaction   交互，交流，互动</p></li><li><p>Thread        线，线程</p></li><li><p>Multiplex     复用，多重</p></li><li><p>Map           映现，映射</p></li><li><p>DeadLock      死锁</p></li><li><p>Diagram       图，图表，示意图</p></li><li><p>View          视图</p></li><li><p>Inner         内部，内部的</p></li><li><p>Maintenance   维护</p></li><li><p>Oriented      使面向，使朝向</p></li><li><p>Advanced      高级（设置，选项）</p></li><li><p>Collaboration 合作，协作</p></li></ul><h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><ul><li><p>Collapse      重叠，折叠</p></li><li><p>Interval      间隔，时距</p></li><li><p>Radio         单选框</p></li><li><p>Checkbox      复选框</p></li><li><p>Prototype     原型，雏型</p></li><li><p>Thrashing     颠簸，抖动</p></li><li><p>Engine        引擎，发动机</p></li><li><p>Horizontal    水平的</p></li><li><p>Vertical      垂直的</p></li><li><p>Lateral       侧面的，横向的</p></li><li><p>Muscle        肌肉，威信</p></li></ul><h4 id="6"><a href="#6" class="headerlink" title="6"></a>6</h4><ul><li><p>Semaphore     信号量，信号标</p></li><li><p>Oolong        乌龙茶  </p></li><li><p>Filter        过滤，过滤器</p></li><li><p>Integrate     集成，合并</p></li><li><p>Separator     分隔符</p></li><li><p>Fragment      碎片，片段</p></li><li><p>Comment       评论，描述，批评</p></li><li><p>Register      登记，注册</p></li><li><p>Variant       变形，变体</p></li><li><p>Macro         宏指令</p></li><li><p>Meta-Object   元对象</p></li><li><p>Loop          回路，循环</p></li><li><p>Analogous     类似的</p></li><li><p>Outline       轮廓，大纲</p></li><li><p>Distinct      明显的，独特的</p></li><li><p>stable 稳定的</p></li><li><p>Implement 实现，执行</p></li><li><p>Hexadecimal 十六进值</p></li><li><p>Compress      压缩</p></li><li><p>Recurse      递归</p></li><li><p>Dispatch      发送，派遣</p></li><li><p>Literal          文字的</p></li><li><p>Frame         框架，结构</p></li><li><p>Loop        环形，圈</p></li><li><p>Register      登记，注册</p></li><li><p>Sprite       妖精,精灵,鬼怪,调皮鬼</p></li><li><p>Contradiction     矛盾，对立</p></li></ul><h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><ul><li>Parse      解析，从语法上分析   </li><li>Cursor     游标，指针   </li><li>Commit     提交   </li><li>Compile   编译   </li><li>Sheet    表单   </li><li>Module   模块</li></ul><h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><ul><li>Iterator 迭代器，迭代程序</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020&lt;/p&gt;
&lt;h4 id=&quot;4&quot;&gt;&lt;a href=&quot;#4&quot; class=&quot;headerlink&quot; title=&quot;4&quot;&gt;&lt;/a&gt;4&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Framework     架构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Architecture  架构&lt;/p</summary>
      
    
    
    
    <category term="term" scheme="http://example.com/categories/term/"/>
    
    
  </entry>
  
  <entry>
    <title>One</title>
    <link href="http://example.com/2020/04/10/one/"/>
    <id>http://example.com/2020/04/10/one/</id>
    <published>2020-04-10T09:29:26.000Z</published>
    <updated>2020-04-11T09:29:26.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><em>Those times when you get up early and you work hard</em></li><li><em>Those times when you stay up late and you work hard</em></li><li><em>Those times when you don’t feel like working, you too tired, you don’t want to push yourself, but you do it anyway.</em></li><li><em>That is actually the dream</em></li></ul><p> <strong>-For Kobe Bryant</strong></p><ul><li><p><em>I was most working in a virtual world</em></p></li><li><p><em>I don’t believe the code change the world</em></p></li><li><p><em>I think the people change the world</em></p></li></ul><p>if you were in a bad situation, why not enjoy this sonnet</p><ul><li><p>Shall I compare thee to a summer’s day?</p></li><li><p>Thou art more lovely and more temperate:</p></li><li><p>Rough winds do shake the darling buds of May,</p></li><li><p>And summer’s lease hath all too short a date:</p></li><li><p>Sometime too hot the eye of heaven shines,</p></li><li><p>And often is his gold complexion dimmed,</p></li><li><p>And, every fair from fair sometime declines,</p></li><li><p>By chance,or nature’s changing course untrimmed;</p></li><li><p>But thy eternal summer shall not fade,</p></li><li><p>Nor lose possession of that fair thou ow’st,</p></li><li><p>Nor shall death brag thou wander stis his shade</p></li><li><p>When in eternal lines to time thou grow’st,</p></li><li><p>So long as men can breathe or eyes can see,</p></li><li><p>So long lives this, and this gives life to thee.</p></li></ul><p> <strong>-For William Shakespeare</strong></p><p>haha, I know you are confused</p><p>but Life is tough sometimes, right?  we need  be kind to him(her)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Those times when you get up early and you work hard&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Those times when you stay up late and you work hard&lt;/em&gt;&lt;</summary>
      
    
    
    
    <category term="record" scheme="http://example.com/categories/record/"/>
    
    <category term="memory" scheme="http://example.com/categories/record/memory/"/>
    
    
    <category term="life" scheme="http://example.com/tags/life/"/>
    
  </entry>
  
</feed>
